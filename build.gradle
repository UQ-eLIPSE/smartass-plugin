//+
//
//
//-

//------------------------------------------------------------------------------

apply plugin: 'java'


sourceCompatibility = 1.8
targetCompatibility = 1.8


task wrapper(type: Wrapper) { gradleVersion = '2.9' }

repositories { mavenCentral() }

dependencies {

	//
	// 	. compile .
	//
        
        // @TODO: make dependency on 'QuestionModule' Interface Library.

	//
	// 	. testCompile . 
	//
	testCompile 'junit:junit:4.12'

	testCompile 'org.json:json:20141113'
	testCompile 'com.hp.hpl.jena:arq:2.8.3'

	//
	// 	. Updates .
	//
	compile 'ch.qos.logback:logback-core:1.1.3'
	compile 'ch.qos.logback:logback-classic:1.1.3'
	compile 'org.codehaus.groovy:groovy:2.4.4'

        //
        //      . local libs .
        //
	compile fileTree('libs')
}

test { 
        testLogging {
                events 'passed'
        }
}

jar {
	baseName = 'smartass-plugin'
	version = '0.1.0'
}


allprojects {
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << '-Xlint'
		}
	}
}

task createService << {
        def clsDir = "${buildDir}/classes/main"
        def questionPack = "au/edu/uq/smartass/question"
        def serviceDir = "${buildDir}/resources/main/META_INF/services"

        new File("$serviceDir").mkdirs()
        def fos = new FileOutputStream(
                "${serviceDir}/au.edu.uq.smartass.engine.QuestionModule"
            )
        new File("${clsDir}/${questionPack}").eachFileRecurse(groovy.io.FileType.FILES) {
            file ->
                if ( ! file.name =~ /\.class$/ ) return
                if ( file.name =~ /^Abstract/ ) return
                if ( file.name =~ /\$/ ) return

                fos <<
                        file.path.replaceAll( /($clsDir)\/($questionPack)\/(.*)\.class/ ) {
                            _0, _1, smartass, question ->
                                return "${smartass}/${question}".replaceAll( ~/\//, ".")
                        }
                fos << "\n"
        }
        fos.close()
}

/** Debug utility task. */
task printClassPath << {
        configurations.runtime.each { println it }
}

defaultTasks 'clean', 'check', 'createService', /*'javadoc',*/ 'build'


